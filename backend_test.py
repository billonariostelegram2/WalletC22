#!/usr/bin/env python3
"""
Backend API Testing for User Verification Issue Diagnosis
Testing critical user verification workflow that's reported as failing
"""

import requests
import json
import sys
from datetime import datetime

# Backend URL from frontend/.env
BACKEND_URL = "https://0d948033-b026-48de-8f70-7d1741710ba7.preview.emergentagent.com/api"

def print_test_header(test_name):
    print(f"\n{'='*60}")
    print(f"TEST: {test_name}")
    print(f"{'='*60}")

def print_response(response, description="Response"):
    print(f"\n{description}:")
    print(f"Status Code: {response.status_code}")
    print(f"Headers: {dict(response.headers)}")
    try:
        response_json = response.json()
        print(f"Body: {json.dumps(response_json, indent=2, default=str)}")
        return response_json
    except:
        print(f"Body (text): {response.text}")
        return None

def test_get_users():
    """Test 1: Verify endpoint de usuarios - GET /api/users"""
    print_test_header("GET /api/users - Verificar lista completa de usuarios")
    
    try:
        response = requests.get(f"{BACKEND_URL}/users")
        users = print_response(response, "GET /api/users Response")
        
        if response.status_code == 200 and users:
            print(f"\n‚úÖ SUCCESS: Found {len(users)} users")
            
            # Analyze user verification status
            verified_users = [u for u in users if u.get('verified', False)]
            approved_users = [u for u in users if u.get('approved', False)]
            
            print(f"\nUSER ANALYSIS:")
            print(f"- Total users: {len(users)}")
            print(f"- Verified users: {len(verified_users)}")
            print(f"- Approved users: {len(approved_users)}")
            
            for i, user in enumerate(users):
                print(f"\nUser {i+1}:")
                print(f"  - ID: {user.get('id', 'N/A')}")
                print(f"  - Email: {user.get('email', 'N/A')}")
                print(f"  - Verified: {user.get('verified', False)}")
                print(f"  - Approved: {user.get('approved', False)}")
                print(f"  - Is Admin: {user.get('is_admin', False)}")
            
            return users
        else:
            print(f"‚ùå FAILED: Status {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None

def test_manual_verification(user_id):
    """Test 2: Probar proceso de verificaci√≥n manual"""
    print_test_header(f"PUT /api/users/{user_id} - Verificaci√≥n manual")
    
    try:
        # Test manual verification
        update_data = {"verified": True}
        response = requests.put(f"{BACKEND_URL}/users/{user_id}", json=update_data)
        updated_user = print_response(response, f"PUT /api/users/{user_id} Response")
        
        if response.status_code == 200 and updated_user:
            print(f"\n‚úÖ SUCCESS: User updated")
            print(f"- Verified: {updated_user.get('verified', False)}")
            print(f"- Approved: {updated_user.get('approved', False)}")
            
            # Verify the change persisted by getting user again
            print(f"\nüîç VERIFICATION: Getting user again to confirm persistence...")
            verify_response = requests.get(f"{BACKEND_URL}/users/{user_id}")
            verify_user = print_response(verify_response, "Verification GET Response")
            
            if verify_response.status_code == 200 and verify_user:
                if verify_user.get('verified', False):
                    print(f"‚úÖ CONFIRMED: User verification persisted in database")
                else:
                    print(f"‚ùå CRITICAL: User verification NOT persisted in database!")
                return verify_user
            else:
                print(f"‚ùå FAILED: Could not verify persistence")
                return None
        else:
            print(f"‚ùå FAILED: Status {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None

def test_voucher_workflow(user_email):
    """Test 3: Probar proceso completo de voucher"""
    print_test_header("Voucher Workflow - Create and Approve")
    
    try:
        # Step 1: Create voucher
        voucher_data = {
            "user_email": user_email,
            "code": "CRYPTO123TEST",
            "device": "test_device"
        }
        
        print(f"Creating voucher for {user_email}...")
        create_response = requests.post(f"{BACKEND_URL}/vouchers", json=voucher_data)
        voucher = print_response(create_response, "POST /api/vouchers Response")
        
        if create_response.status_code != 200 or not voucher:
            print(f"‚ùå FAILED: Could not create voucher")
            return None
            
        voucher_id = voucher.get('id')
        print(f"‚úÖ Voucher created with ID: {voucher_id}")
        
        # Step 2: Approve voucher
        print(f"\nApproving voucher {voucher_id}...")
        approve_data = {"status": "aprobado"}
        approve_response = requests.put(f"{BACKEND_URL}/vouchers/{voucher_id}", json=approve_data)
        approved_voucher = print_response(approve_response, "PUT /api/vouchers/{voucher_id} Response")
        
        if approve_response.status_code != 200 or not approved_voucher:
            print(f"‚ùå FAILED: Could not approve voucher")
            return None
            
        print(f"‚úÖ Voucher approved")
        
        # Step 3: Check if user was automatically verified
        print(f"\nüîç CHECKING: Did user get automatically verified?")
        users = test_get_users()
        if users:
            target_user = next((u for u in users if u.get('email') == user_email), None)
            if target_user:
                print(f"\nUser status after voucher approval:")
                print(f"- Verified: {target_user.get('verified', False)}")
                print(f"- Approved: {target_user.get('approved', False)}")
                
                if target_user.get('verified', False) and target_user.get('approved', False):
                    print(f"‚úÖ SUCCESS: User automatically verified after voucher approval")
                else:
                    print(f"‚ùå CRITICAL: User NOT automatically verified after voucher approval!")
                    
                return target_user
            else:
                print(f"‚ùå ERROR: Could not find user with email {user_email}")
        
        return None
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None

def test_data_consistency():
    """Test 4: Verificar consistencia de datos"""
    print_test_header("Data Consistency Check")
    
    try:
        # Get all users
        users_response = requests.get(f"{BACKEND_URL}/users")
        if users_response.status_code != 200:
            print(f"‚ùå FAILED: Could not get users list")
            return False
            
        users = users_response.json()
        print(f"Found {len(users)} users for consistency check")
        
        # Check each user individually
        consistent = True
        for user in users:
            user_id = user.get('id')
            if not user_id:
                continue
                
            # Get individual user
            individual_response = requests.get(f"{BACKEND_URL}/users/{user_id}")
            if individual_response.status_code != 200:
                print(f"‚ùå INCONSISTENCY: Could not get individual user {user_id}")
                consistent = False
                continue
                
            individual_user = individual_response.json()
            
            # Compare key fields
            list_verified = user.get('verified', False)
            individual_verified = individual_user.get('verified', False)
            list_approved = user.get('approved', False)
            individual_approved = individual_user.get('approved', False)
            
            if list_verified != individual_verified or list_approved != individual_approved:
                print(f"‚ùå INCONSISTENCY found for user {user.get('email', user_id)}:")
                print(f"  List API - Verified: {list_verified}, Approved: {list_approved}")
                print(f"  Individual API - Verified: {individual_verified}, Approved: {individual_approved}")
                consistent = False
            else:
                print(f"‚úÖ User {user.get('email', user_id)[:20]}... - Consistent")
        
        if consistent:
            print(f"\n‚úÖ SUCCESS: All user data is consistent between endpoints")
        else:
            print(f"\n‚ùå CRITICAL: Data inconsistencies found!")
            
        return consistent
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def test_email_diagnostic_urgent():
    """PRUEBA URGENTE PARA DIAGNOSTICAR PROBLEMA DE EMAIL"""
    print_test_header("üö® DIAGN√ìSTICO URGENTE - PROBLEMA DE EMAIL")
    
    try:
        print("üéØ OBJETIVO: Crear voucher y capturar logs detallados para identificar exactamente por qu√© no funciona el email")
        
        # 1. Crear voucher de prueba con logs detallados
        print("\nüìß STEP 1: Creating DEBUG voucher with detailed logging...")
        voucher_data = {
            "code": "DEBUG-EMAIL-TEST",
            "user_email": "debug@test.com",
            "device": "test_device"
        }
        
        print(f"Voucher data: {json.dumps(voucher_data, indent=2)}")
        print(f"üîç MONITORING: Watching for specific email process logs...")
        
        # Create voucher and capture response
        response = requests.post(f"{BACKEND_URL}/vouchers", json=voucher_data)
        voucher = print_response(response, "POST /api/vouchers Response")
        
        if response.status_code == 200 and voucher:
            print(f"‚úÖ SUCCESS: DEBUG voucher created successfully")
            print(f"- Voucher ID: {voucher.get('id')}")
            print(f"- Voucher Code: {voucher.get('code')}")
            print(f"- User Email: {voucher.get('user_email')}")
            print(f"- Status: {voucher.get('status')}")
            
            # 2. Verificar configuraci√≥n espec√≠fica
            print(f"\nüìß STEP 2: Verifying exact configuration values...")
            print(f"Expected configuration from backend/.env:")
            print(f"- GMAIL_EMAIL: 'descifrab@gmail.com'")
            print(f"- GMAIL_APP_PASSWORD: 'cacadevaca' (length: 10 chars)")
            print(f"- NOTIFICATION_EMAIL: 'descifrab@gmail.com'")
            print(f"\n‚ö†Ô∏è  EXPECTED ISSUE: 'cacadevaca' is NOT a valid Gmail App Password")
            print(f"   Gmail App Passwords must be 16 characters like: 'abcd efgh ijkl mnop'")
            
            # 3. Logs espec√≠ficos a buscar
            print(f"\nüìß STEP 3: LOGS ESPEC√çFICOS A CAPTURAR:")
            print(f"üîç Buscar en logs los mensajes que empiecen con 'üìß':")
            print(f"   1. 'üìß STARTING EMAIL PROCESS:'")
            print(f"   2. 'üìß ATTEMPTING GMAIL CONNECTION...'")
            print(f"   3. 'üìß SSL connection established...'")
            print(f"   4. 'üìß Gmail login successful...' (o error aqu√≠)")
            print(f"   5. '‚ùå Gmail Authentication Error:'")
            
            print(f"\nüö® INFORMACI√ìN CR√çTICA ESPERADA:")
            print(f"¬øEn qu√© paso exacto falla el email?")
            print(f"- ¬øSSL connection? ‚úì (deber√≠a funcionar)")
            print(f"- ¬øGmail login? ‚ùå (deber√≠a fallar aqu√≠)")
            print(f"- ¬øEnv√≠o del mensaje? (no llega a este punto)")
            
            print(f"\nüìß STEP 4: Waiting for email process to complete...")
            print(f"‚è≥ Email process runs in background thread...")
            
            # Wait a moment for the email process to complete
            import time
            time.sleep(3)
            
            print(f"\n‚úÖ VOUCHER CREATION COMPLETED")
            print(f"üîç NOW CHECK BACKEND LOGS FOR EMAIL DIAGNOSTIC INFO")
            
            return True
            
        else:
            print(f"‚ùå FAILED: Could not create DEBUG voucher - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def test_email_notification_system():
    """Test 5: PRUEBA CR√çTICA DEL SISTEMA DE NOTIFICACIONES POR EMAIL"""
    print_test_header("SISTEMA DE NOTIFICACIONES POR EMAIL - CRYPTOVOUCHER")
    
    try:
        # 1. Crear un voucher de prueba con datos espec√≠ficos
        print("üìß STEP 1: Creating test voucher for email notification...")
        voucher_data = {
            "code": "TEST-EMAIL-2024",
            "user_email": "test@test.com",  # Note: using user_email as per API
            "device": "test_device"
        }
        
        print(f"Voucher data: {json.dumps(voucher_data, indent=2)}")
        
        # Create voucher and capture response
        response = requests.post(f"{BACKEND_URL}/vouchers", json=voucher_data)
        voucher = print_response(response, "POST /api/vouchers Response")
        
        if response.status_code == 200 and voucher:
            print(f"‚úÖ SUCCESS: Voucher created successfully")
            print(f"- Voucher ID: {voucher.get('id')}")
            print(f"- Voucher Code: {voucher.get('code')}")
            print(f"- User Email: {voucher.get('user_email')}")
            print(f"- Status: {voucher.get('status')}")
            
            # 2. Verificar configuraci√≥n de email
            print(f"\nüìß STEP 2: Checking email configuration...")
            print(f"Expected email configuration:")
            print(f"- GMAIL_EMAIL: descifrab@gmail.com")
            print(f"- GMAIL_APP_PASSWORD: cacadevaca")
            print(f"- NOTIFICATION_EMAIL: descifrab@gmail.com")
            
            # 3. Informaci√≥n para verificar logs
            print(f"\nüìß STEP 3: Email process verification instructions...")
            print(f"üîç CHECK BACKEND LOGS FOR:")
            print(f"- Message: 'üö® VOUCHER REGISTERED: TEST-EMAIL-2024 by test@test.com - Email sent to descifrab@gmail.com'")
            print(f"- Function execution: send_email_async called")
            print(f"- Email sending: send_voucher_notification_email executed")
            print(f"- Success message: '‚úÖ Email notification sent successfully for voucher: TEST-EMAIL-2024'")
            print(f"- OR Error message: '‚ùå Error sending email notification: [error details]'")
            
            print(f"\nüìß STEP 4: Checking backend logs now...")
            return True
            
        else:
            print(f"‚ùå FAILED: Could not create voucher - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def test_final_email_system_with_correct_credentials():
    """PRUEBA FINAL COMPLETA DEL SISTEMA DE NOTIFICACIONES POR EMAIL CON CREDENCIALES CORRECTAS"""
    print_test_header("üö® PRUEBA FINAL - SISTEMA DE EMAIL CON CREDENCIALES CORRECTAS")
    
    try:
        print("üéØ OBJETIVO: Verificar que el sistema de notificaciones por email funcione completamente con la nueva contrase√±a de aplicaci√≥n de Gmail")
        
        # 1. Crear voucher con credenciales correctas
        print("\nüìß STEP 1: Creating voucher with correct credentials...")
        voucher_data = {
            "code": "FINAL-EMAIL-TEST-2025",
            "user_email": "final_test@test.com",
            "device": "final_test"
        }
        
        print(f"Voucher data: {json.dumps(voucher_data, indent=2)}")
        print(f"üîç MONITORING: Watching for complete email process with updated credentials...")
        
        # Create voucher and capture response
        response = requests.post(f"{BACKEND_URL}/vouchers", json=voucher_data)
        voucher = print_response(response, "POST /api/vouchers Response")
        
        if response.status_code == 200 and voucher:
            print(f"‚úÖ SUCCESS: FINAL voucher created successfully")
            print(f"- Voucher ID: {voucher.get('id')}")
            print(f"- Voucher Code: {voucher.get('code')}")
            print(f"- User Email: {voucher.get('user_email')}")
            print(f"- Status: {voucher.get('status')}")
            
            # 2. Verificar configuraci√≥n actualizada
            print(f"\nüìß STEP 2: Verifying UPDATED configuration...")
            print(f"Expected UPDATED configuration from backend/.env:")
            print(f"- GMAIL_EMAIL: descifrab@gmail.com")
            print(f"- GMAIL_APP_PASSWORD: 'ucda imqo cndg ujca' (16 chars) ‚úÖ")
            print(f"- NOTIFICATION_EMAIL: descifrab@gmail.com")
            print(f"\n‚úÖ EXPECTED SUCCESS: 'ucda imqo cndg ujca' IS a valid Gmail App Password format")
            
            # 3. Logs espec√≠ficos a buscar para proceso completo
            print(f"\nüìß STEP 3: LOGS ESPEC√çFICOS PARA PROCESO COMPLETO:")
            print(f"üîç Buscar en logs los mensajes que confirmen proceso exitoso:")
            print(f"   1. 'üìß STARTING EMAIL PROCESS:' ‚úÖ")
            print(f"   2. 'üìß ATTEMPTING GMAIL CONNECTION...' ‚úÖ")
            print(f"   3. 'üìß SSL connection established...' ‚úÖ")
            print(f"   4. 'üìß Gmail login successful...' ‚úÖ (DEBE FUNCIONAR AHORA!)")
            print(f"   5. 'üìß Email sent successfully...' ‚úÖ")
            print(f"   6. '‚úÖ Email notification sent successfully for voucher:' ‚úÖ")
            
            print(f"\nüö® EXPECTATIVAS CON CREDENCIALES CORRECTAS:")
            print(f"‚úÖ Conexi√≥n SSL exitosa")
            print(f"‚úÖ Gmail login exitoso (sin error 535)")
            print(f"‚úÖ Email enviado completamente")
            print(f"‚úÖ Mensaje de confirmaci√≥n en logs")
            print(f"‚úÖ NO debe haber '‚ùå Gmail Authentication Error'")
            
            print(f"\nüìß STEP 4: Waiting for complete email process...")
            print(f"‚è≥ Email process runs in background thread...")
            
            # Wait for the email process to complete
            import time
            time.sleep(5)  # Longer wait to ensure complete process
            
            print(f"\n‚úÖ VOUCHER CREATION WITH EMAIL NOTIFICATION COMPLETED")
            print(f"üîç NOW CHECK BACKEND LOGS FOR COMPLETE EMAIL SUCCESS")
            print(f"\nüéØ RESULTADO ESPERADO: El email debe enviarse exitosamente a descifrab@gmail.com")
            print(f"   con toda la informaci√≥n del voucher FINAL-EMAIL-TEST-2025")
            
            return True
            
        else:
            print(f"‚ùå FAILED: Could not create FINAL voucher - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def test_urgent_email_intermittency_diagnosis():
    """üö® DIAGN√ìSTICO URGENTE: PROBLEMA INTERMITENTE DE EMAIL REPORTADO POR USUARIO"""
    print_test_header("üö® DIAGN√ìSTICO URGENTE - PROBLEMA INTERMITENTE DE EMAIL")
    
    try:
        print("üö® SITUACI√ìN CR√çTICA REPORTADA:")
        print("- Durante tests anteriores S√ç llegaron emails (usuario confirma recibi√≥ 3 emails)")
        print("- Despu√©s cuando el usuario prob√≥ personalmente, NO llegaron emails")
        print("- Esto indica problema intermitente que necesita resoluci√≥n inmediata")
        
        print(f"\nüìß STEP 1: Verificando configuraci√≥n actual despu√©s de restart...")
        print(f"Configuraci√≥n esperada en backend/.env:")
        print(f"- GMAIL_EMAIL: 'descifrab@gmail.com'")
        print(f"- GMAIL_APP_PASSWORD: 'ucda imqo cndg ujca' (16 chars)")
        print(f"- NOTIFICATION_EMAIL: 'exodus.ayuda@gmail.com' (CAMBIADO)")
        
        print(f"\nüìß STEP 2: Creando voucher de prueba urgente...")
        voucher_data = {
            "code": "URGENT-FIX-TEST-2025",
            "user_email": "urgent_fix@test.com",
            "device": "urgent_diagnosis"
        }
        
        print(f"Voucher data: {json.dumps(voucher_data, indent=2)}")
        print(f"üéØ OBJETIVO: Confirmar que el email se env√≠e a exodus.ayuda@gmail.com")
        
        # Create voucher and capture response
        response = requests.post(f"{BACKEND_URL}/vouchers", json=voucher_data)
        voucher = print_response(response, "POST /api/vouchers Response")
        
        if response.status_code == 200 and voucher:
            print(f"‚úÖ SUCCESS: Voucher URGENT-FIX-TEST-2025 creado exitosamente")
            print(f"- Voucher ID: {voucher.get('id')}")
            print(f"- Voucher Code: {voucher.get('code')}")
            print(f"- User Email: {voucher.get('user_email')}")
            print(f"- Status: {voucher.get('status')}")
            
            print(f"\nüìß STEP 3: Capturando logs detallados del proceso de email...")
            print(f"üîç LOGS CR√çTICOS A VERIFICAR:")
            print(f"   1. 'üìß STARTING EMAIL PROCESS:' - ¬øSe inicia el proceso?")
            print(f"   2. 'üìß ATTEMPTING GMAIL CONNECTION...' - ¬øSe intenta conexi√≥n?")
            print(f"   3. 'üìß SSL connection established...' - ¬øSSL funciona?")
            print(f"   4. 'üìß Gmail login successful...' - ¬øLogin exitoso?")
            print(f"   5. 'üìß Email sent successfully...' - ¬øEmail enviado?")
            print(f"   6. '‚úÖ Email notification sent successfully' - ¬øConfirmaci√≥n final?")
            
            print(f"\nüö® IDENTIFICAR CAUSA DE INTERMITENCIA:")
            print(f"¬øVariables de entorno no carg√°ndose despu√©s de restart?")
            print(f"¬øProblema de threading en send_email_async?")
            print(f"¬øRate limiting de Gmail?")
            print(f"¬øConexi√≥n SSL intermitente?")
            print(f"¬øCambio de NOTIFICATION_EMAIL no aplicado?")
            
            print(f"\nüìß STEP 4: Esperando proceso completo de email...")
            import time
            time.sleep(5)  # Wait for email process
            
            print(f"\n‚úÖ VOUCHER URGENT-FIX-TEST-2025 PROCESADO")
            print(f"üéØ RESULTADO ESPERADO: Email debe llegar a exodus.ayuda@gmail.com")
            print(f"üîç VERIFICAR LOGS BACKEND PARA DIAGN√ìSTICO COMPLETO")
            
            return True
            
        else:
            print(f"‚ùå FAILED: No se pudo crear voucher urgente - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

def main():
    """Main testing function - DIAGN√ìSTICO URGENTE DE EMAIL"""
    print("üö® DIAGN√ìSTICO URGENTE: PROBLEMA INTERMITENTE DE EMAIL REPORTADO POR USUARIO")
    print(f"Backend URL: {BACKEND_URL}")
    print(f"Test Time: {datetime.now()}")
    
    # DIAGN√ìSTICO URGENTE: Problema intermitente de email
    print("\n" + "="*80)
    print("üö® DIAGN√ìSTICO URGENTE - PROBLEMA INTERMITENTE DE EMAIL")
    print("="*80)
    
    urgent_test_result = test_urgent_email_intermittency_diagnosis()
    
    if urgent_test_result:
        print(f"\n‚úÖ DIAGN√ìSTICO URGENTE COMPLETADO")
        print(f"\nüìß VERIFICACI√ìN CR√çTICA - CHECK BACKEND LOGS:")
        print(f"1. Buscar mensajes que empiecen con 'üìß'")
        print(f"2. Confirmar proceso completo o identificar punto de falla:")
        print(f"   - ¬øSe carga configuraci√≥n correctamente?")
        print(f"   - ¬øVariables de entorno disponibles?")
        print(f"   - ¬øProceso de email se ejecuta?")
        print(f"   - ¬øConexi√≥n SSL exitosa?")
        print(f"   - ¬øLogin Gmail exitoso?")
        print(f"   - ¬øEmail enviado a exodus.ayuda@gmail.com?")
        
        print(f"\nüîç CONFIGURACI√ìN ESPERADA:")
        print(f"- GMAIL_EMAIL: descifrab@gmail.com")
        print(f"- GMAIL_APP_PASSWORD: ucda imqo cndg ujca (16 chars)")
        print(f"- NOTIFICATION_EMAIL: exodus.ayuda@gmail.com (NUEVO DESTINO)")
        
        print(f"\nüéØ RESULTADO CR√çTICO:")
        print(f"Email con c√≥digo URGENT-FIX-TEST-2025 debe llegar a exodus.ayuda@gmail.com")
        print(f"Si no llega, identificar exactamente en qu√© paso falla el proceso")
        
    else:
        print(f"\n‚ùå DIAGN√ìSTICO URGENTE FALL√ì")
        print(f"No se pudo crear voucher de prueba para diagn√≥stico")
    
    print(f"\n{'='*80}")
    print("üèÅ DIAGN√ìSTICO URGENTE DE EMAIL COMPLETADO")
    print(f"{'='*80}")

if __name__ == "__main__":
    main()